// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_RcppSimdJson_RCPPEXPORTS_H_GEN_
#define RCPP_RcppSimdJson_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace RcppSimdJson {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("RcppSimdJson", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("RcppSimdJson", "_RcppSimdJson_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in RcppSimdJson");
            }
        }
    }

    inline SEXP _deserialize_json(SEXP json, SEXP query = R_NilValue, SEXP empty_array = R_NilValue, SEXP empty_object = R_NilValue, SEXP single_null = R_NilValue, const bool parse_error_ok = false, SEXP on_parse_error = R_NilValue, const bool query_error_ok = false, SEXP on_query_error = R_NilValue, const int simplify_to = 0, const int type_policy = 0, const int int64_r_type = 0) {
        typedef SEXP(*Ptr__deserialize_json)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr__deserialize_json p__deserialize_json = NULL;
        if (p__deserialize_json == NULL) {
            validateSignature("SEXP(*_deserialize_json)(SEXP,SEXP,SEXP,SEXP,SEXP,const bool,SEXP,const bool,SEXP,const int,const int,const int)");
            p__deserialize_json = (Ptr__deserialize_json)R_GetCCallable("RcppSimdJson", "_RcppSimdJson__deserialize_json");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p__deserialize_json(Shield<SEXP>(Rcpp::wrap(json)), Shield<SEXP>(Rcpp::wrap(query)), Shield<SEXP>(Rcpp::wrap(empty_array)), Shield<SEXP>(Rcpp::wrap(empty_object)), Shield<SEXP>(Rcpp::wrap(single_null)), Shield<SEXP>(Rcpp::wrap(parse_error_ok)), Shield<SEXP>(Rcpp::wrap(on_parse_error)), Shield<SEXP>(Rcpp::wrap(query_error_ok)), Shield<SEXP>(Rcpp::wrap(on_query_error)), Shield<SEXP>(Rcpp::wrap(simplify_to)), Shield<SEXP>(Rcpp::wrap(type_policy)), Shield<SEXP>(Rcpp::wrap(int64_r_type)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP _load_json(const Rcpp::CharacterVector& json, SEXP query = R_NilValue, SEXP empty_array = R_NilValue, SEXP empty_object = R_NilValue, SEXP single_null = R_NilValue, const bool parse_error_ok = false, SEXP on_parse_error = R_NilValue, const bool query_error_ok = false, SEXP on_query_error = R_NilValue, const int simplify_to = 0, const int type_policy = 0, const int int64_r_type = 0) {
        typedef SEXP(*Ptr__load_json)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr__load_json p__load_json = NULL;
        if (p__load_json == NULL) {
            validateSignature("SEXP(*_load_json)(const Rcpp::CharacterVector&,SEXP,SEXP,SEXP,SEXP,const bool,SEXP,const bool,SEXP,const int,const int,const int)");
            p__load_json = (Ptr__load_json)R_GetCCallable("RcppSimdJson", "_RcppSimdJson__load_json");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p__load_json(Shield<SEXP>(Rcpp::wrap(json)), Shield<SEXP>(Rcpp::wrap(query)), Shield<SEXP>(Rcpp::wrap(empty_array)), Shield<SEXP>(Rcpp::wrap(empty_object)), Shield<SEXP>(Rcpp::wrap(single_null)), Shield<SEXP>(Rcpp::wrap(parse_error_ok)), Shield<SEXP>(Rcpp::wrap(on_parse_error)), Shield<SEXP>(Rcpp::wrap(query_error_ok)), Shield<SEXP>(Rcpp::wrap(on_query_error)), Shield<SEXP>(Rcpp::wrap(simplify_to)), Shield<SEXP>(Rcpp::wrap(type_policy)), Shield<SEXP>(Rcpp::wrap(int64_r_type)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline bool _exceptions_enabled() {
        typedef SEXP(*Ptr__exceptions_enabled)();
        static Ptr__exceptions_enabled p__exceptions_enabled = NULL;
        if (p__exceptions_enabled == NULL) {
            validateSignature("bool(*_exceptions_enabled)()");
            p__exceptions_enabled = (Ptr__exceptions_enabled)R_GetCCallable("RcppSimdJson", "_RcppSimdJson__exceptions_enabled");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p__exceptions_enabled();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<bool >(rcpp_result_gen);
    }

}

#endif // RCPP_RcppSimdJson_RCPPEXPORTS_H_GEN_
